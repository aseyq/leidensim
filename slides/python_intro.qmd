---
title: "Python Crash Course"
subtitle: Session II - Introduction to ABM
author: "Ali Seyhun Saral (Uni. Bologna)"
institute: "Institute of Psychology at Leiden University."
date: "13 June 2022"
execute:
  echo: true
format: 
  revealjs:
    theme: white
    incremental: false
    smaller: true
    preview-links: auto
    css: styles.css
bibliography: bibliography.bib
---

## What is Python?
:::: {.columns}

::: {.column width="50%"}

- `Python` is the one of the most popular general-purpose programming languages.

- It is a **multi-paradigm** programming language.

- Applications include -but not limited to- web development, software development, data analysis, automated tasks...

- It has a magnificent ecosystem of libraries and frameworks.

:::

::: {.column width="40%"}
![](images/pythonlogo.svg){height="100px"}
:::

::::

## How to interact with python


:::: {.columns}

::: {.column width="50%"}

- Python is essentially a **command-line interpreter** in its core.


**1- Python Interpreter**

:::

::: {.column width="50%"}
![](images/python_interpreter.png){width="600px"}
:::

::::

## How to interact with python


:::: {.columns}

::: {.column width="50%"}

**2- Running a Python Script from the Terminal**

- Python scripts have the extension `.py`
:::

::: {.column width="50%"}
![](images/python_notepad.png){width="600px"}
![](images/python_script.png){width="600px"}
:::

::::

## How to interact with Python

:::: {.columns}

::: {.column width="50%"}


**3- Using a development environment**

* Some of them are `PyCharm`, `VSCode`, `RStudio` and so on.
:::

::: {.column width="50%"}
![](images/vscode_python.png){width="400px"}
![](images/pycharm_python.png){width="400px"}
:::

* Usually `Shift + Enter` or `Ctrl + Enter` to send the command to shell
::::

## How to interact with Python

:::: {.columns}

::: {.column width="50%"}


**4- Jupyter Notebook**

* Browser environment for writing and running interactive Python code.

* You can combine text and code cells to create a notebook.

:::

::: {.column width="50%"}
![](images/jupyter.png){width="400px"}
:::

::::

## How to interact with Python

:::: {.columns}

::: {.column width="50%"}



**4- Jupyter Notebook**

| Keyboard Shortcut | Description |
| ---------------- | ----------- |
| `Shift + Enter`  | Send the cell to the kernel for execution |
| `Ctrl + Enter`   | Run the cell and advance to the next cell |
| `Enter`          | Edit the cell           |
| `Esc`            | Stop Editing the cell   |
| `H`              | Help                    |
| `M`              | Cell to Markdown (text) |
| `Y`              | Cell to code            |
:::

::: {.column width="50%"}
![](images/jupyter.png){width="400px"}
:::

::::

## Hello World!

* To print things in the console, one should use `print()` function. 

. . .

* Let's go ahead and print `Hello World`:

. . . 

```{python}
print("Hello World!")

```
  
## Using Python as calculator

- Using `python` as calculator:

. . . 

```{python}
42 + 38
```

. . . 

```{python}
36 * 5
```



## Arithmethic Operators in Python
|   |   |
|---|---|
| `a + b` | Addition |
| `a - b` | Subtraction |
| `a * b` | Mutiplication |
| `a / b` | Division |
| `a ** b`|  Exponention (\\( a^b \\)) |
| `a % b` | Modulo (\\( a \\: mod \\: b \\)) |

## Variables in Python
:::{.incremental}

- Links a value to a name
- Case-sensitive
- Can contain any alphanumeric characters and underscores (A-z, 0-9, _)
- Cannot start with a number
- You can print the value of a parameter with the `print()` function.
- Oftentimes just a variable name is enough to print it.
:::
 
. . . 

```{python}
#| output-location: column-fragment
height = 100 * 2
print(height)
```

. . .

```{python}
#| output-location: column-fragment
height
```


. . .
```{python}
#| output-location: column-fragment
height = 297
width = 210

area_mm2 = height * width
print(area_mm2)
```



## Commenting in Python
If you have the character `#` on a line, Python interpreter will not read the rest of the line

. . . 

```{python}
#| output-location: column-fragment
# Area of an A4 paper
height = 297 # in mm
width = 210  # in mm

area_mm2 = height * width  # in mm2
print(area_mm2)
```


## Types in Python
```{python}
#| output-location: column-fragment
# Area of an A4 paper
height = 297 # in mm
type(height)
```

. . .


```{python}
#| output-location: column-fragment
# Area of an A4 paper
height = 297.0 # in mm
type(height)
```

. . .


```{python}
#| output-location: column-fragment
# Area of an A4 paper
measure_name = "area"
type(measure_name)
```

. . .

- You can check the type of a variable using the `type()` function.

## Types in Python
We will deal with four main variable types:

:::{.incremental}

- Integers (`int`): `1`, `2`, `-5` ,`2910`  
- Float (`float`): `1.0`, `2.5`, `-5.3`  (decimal numbers)
- String (`str`): `"hi"`, `'good morning!'`, `'Wow! ðŸ˜²'`  (text)
- Boolean (`    bool`): `True`, `False` (logical)

:::

## Types in Python
- Each type has its own set of rules

```{python}
#| output-location: column-fragment
3 + 5
```

. . .

```{python}
#| output-location: column-fragment
'3' + '5'
```


. . . 

```{python}
#| output-location: column-fragment
"Hello" + " World!"

```


## Practice
<h2> `python_intro/Ex1.ipyb` </h2>
<h2> `python_intro/Ex2.ipyb` </h2>


## Lists in Python
- A list is a collection of items in a particular order.
- Lists can contain different types of items.

. . .
```{python}
#| output-location: column-fragment
a = [10,20,30]
print(a)
```

. . .

```{python}
#| output-location: column-fragment
b = ["ali", "bob", "chiara"]
print(b)
```

. . .

```{python}
#| output-location: column-fragment
c = ["ali", 2]
print(c)
```

## Reaching into List Items in Python
- You can access the items in a list using the index.
- The index starts from 0.

|  |   |   |    |
|--:|:---:|:---:|:----:|
|my_list =|[ "ali", | "bob", | "chiara"] |
| | `0` | `1` | `2`  |

<br>
<br>
<br>

. . . 
```{python}
#| echo: false
my_list = ["ali", "bob", "chiara"]
```
. . . 
```{python}
#| output-location: column-fragment
my_list[0]
```
. . . 
```{python}
#| output-location: column-fragment
my_list[1]
```
. . . 
```{python}
#| output-location: column-fragment
my_list[2]
```

## Reaching from the end
- You can access the items from the end using a negative index starting from -1.

|  |   |   |    |
|--:|:---:|:---:|:----:|
|my_list =|[ "ali", | "bob", | "chiara"] |
| | `-3` | `-2` | `-1`  |

<br>
<br>
<br>

. . . 
```{python}
#| echo: false
my_list = ["ali", "bob", "chiara"]
```
. . . 
```{python}
#| output-location: column-fragment
my_list[-1]
```
. . . 
```{python}
#| output-location: column-fragment
my_list[-3]
```

## List Slicing in Python
- You can access a subset of a list using the slice operator `:`. 

- Basic usage 

<h3 class=".center"> [ start : end] </h3>

- `end` is not included in the slice.

. . .

```{python}
#| output-location: column-fragment
my_list = ["ali", "bob", "chiara", "dominique", "elizabeth"]
```

. . .

```{python}
#| output-location: column-fragment
# Get first three items
my_list[0:3] 
```

. . .

```{python}
#| output-location: column-fragment
# Get three items starting from 1
my_list[1:4] 
```

## List Slicing in Python

- If you leave the index empty, python will take from the beggining/end.

```{python}
#| output-location: column-fragment
my_list = ["ali", "bob", "chiara", "dominique", "elizabeth"]
```

. . . 
```{python}
#| output-location: column-fragment
# From the beginning until the index 4
my_list[:4] 
```

. . .

```{python}
#| output-location: column-fragment
# From index 1 until the end
my_list[1:] 
```



## Updating List Items in Python
- You can update the items in a list using the index.

```{python}
#| output-location: column-fragment
#| code-line-numbers: "|3"

my_list = ["ali", "bob", "chiara"]

my_list[0] = "alice"
print(my_list)
```


## List Type and Methods
- Lists has the type `list`

. . . 
```{python}
#| output-location: column-fragment
my_list = ["ali", "bob", "chiara"]
type(my_list)
```
. . . 

- There are specific operations that can be performed on lists.

. . . 

- You can add items to a list using the `append()` function.

. . . 

```{python}
#| output-location: column-fragment
my_list.append("dominique")

print(my_list)
```

## Removing Items from a List in Python
- You can remove items from a list using the `pop()` function.
- The `pop()` function removes the last item in the list.

. . . 

```{python}
#| output-location: column-fragment
my_list = ["ali", "bob", "chiara"]

my_list.pop()
print(my_list)
```

. . .

- The `pop(index)` function removes the item at the specified index.

. . .

```{python}
#| output-location: column-fragment
my_list = ["ali", "bob", "chiara"]

my_list.pop(1)
print(my_list)
```


## Check if an Item Exists in a List in Python
- You can check if an item exists in a list using the `in` operator.
- Example: 

```{python}
#| output-location: column-fragment
my_list = ["ali", "bob", "chiara"]

"ali" in my_list
```

. . .

```{python}
#| output-location: column-fragment
my_list = ["ali", "bob", "chiara"]

"alessandro" in my_list
```

## Combining two lists
- You can combine two lists with `+` operator.
- Example: 

```{python}
#| output-location: column-fragment
my_list1 = ["ali", "bob", "chiara"]
my_list2 = ["zoe", "yoshua"]

new_list = my_list1 + my_list2
print(new_list)
```



## Practice

## Dictionaries
- Also a collection of objects like `lists`
- Unlike lists, items have keys (in other words keywords)
- Can be created with:
  - `{key1: value1, key2: value2}`, or
  - `dict(key1=value1, key2=value2)`


```{python}
#| output-location: column-fragment
my_dictionary = {'ali': 1987, 'bob': 1953, 'chiara':1980}
print(my_dictionary)
```
. . . 

```{python}
#| output-location: column-fragment
my_dictionary2 = dict(ali=1987, bob=1953, chiara=1980)

print(my_dictionary2)
```

## Retrieve an item from dictionary
 - You can retreive an item from a dictionary by its key.

```{python}
#| output-location: column-fragment
birthyears = {"ali": 1987, "bob": 1953, "chiara":1980}
```


```{python}
#| output-location: column-fragment
birthyears["bob"]
```


## Adding a new item to dictionary

```{python}
#| output-location: column-fragment
birthyears = {"ali": 1987, 
              "bob": 1953, 
              "chiara":1980}

birthyears['dana'] = 1992
print(birthyears)
```

## Practice

## Logical Operators
* We have two logical values: `True` and `False`

* `and` and `or` and `not` are the logical operators

* `and` means that both conditions must be true

* `or` means that at least one condition must be true

* `not` reverses the logical value

```{python}
#| output-location: column-fragment
a = 5
b = 10
```

```{python}
#| output-location: column-fragment
print(a == 5 and b == 10)
```

. . . 

```{python}
#| output-location: column-fragment
print(a == 5 and b == 5)
```

. . .

```{python}
#| output-location: column-fragment
print(a == 1 or b == 10)
```

. . .

```{python}
#| output-location: column-fragment
print(not a == 1)
```

## Logical Operators
```{python}
#| output-location: column-fragment
a = 5
b = 10
```

. . .


```{python}
#| output-location: column-fragment
print(a == 1 or b == 10)
```

. . .


```{python}
#| output-location: column-fragment
print(not a == 1)

```



## `if` statement

```{python}
#| output-location: column-fragment
my_variable = 42
```

```{python}
#| output-location: column-fragment
my_variable = 42
if my_variable < 50:
    print("the variable is smaller than 50")

```


## Very important: Indentation
```{python}
#| output-location: column-fragment
my_variable = 42

if my_variable < 50:
    print("the variable is smaller than 50")

```

- Python doesn't have braces like `{ }` or `end` statements to indicate the span.

. . . 

- Instead the hierarchy/ownership of the statements are determined by indents.

. . . 

* `Four spaces` is the accepted convention but you can use `tab` or the another number of spaces as long as it is consistent.

. . . 

- Graphical user interfaces often add four spaces instead of a tab.



## `else` statement

```{python}
#| output-location: column-fragment
my_variable = 42

if my_variable < 50:
    print("the variable is smaller than 50")
else:
    print("the variable is bigger than 50")

```

. . . 

## `elif` statement

```{python}
#| output-location: column-fragment
my_variable = 42

if my_variable < 40:
    print("the variable is smaller than 40")
elif my_variable < 50:
    print("the variable is between 40 and 50")
else:
    print("the variable is bigger than 50")

```


## Functions in Python
* Python has many built-in functions

```{python}
ages = [39,48,21,59]

max(ages)
```

```{python}
my_name = "ali"
len(my_name)

```

## We can build our own functions
* Functions are defined with `def` keyword.
```{python}
#| output-location: column-fragment
def min_max_difference(x):
    return(max(x) - min(x))
    # Beware of indentation


ages = [39,48,21,59]
min_max_difference(ages)

```


## Methods
* Some functions are associated to objects. They are called methods.

* The syntax for methods is `my_object.do_something()`

```{python}
ages = [39,48,21,59]

ages.index(21) # find the index of a given item

```

## Loop over a range of numbers

- Python creates a range object that is iterable with `range()` function. 

- Then one can loop over it to make calculations.

```{python}
#| output-location: column-fragment
for i in range(3,6):
  print(i**2)

```


## For loop over list items

* Lists are not just good for collecting items
* Also for looping over them

. . . 

```{python}
#| output-location: column-fragment
my_list = [1,2,3,4]
```

```{python}
#| output-location: column-fragment
for x in my_list:
  print(x ** 2)
```

## Creating a new list using for loop

* We can generate an empty list and add items recursively.

. . . 

* `list_name.append()` to add an item to a list


. . . 


Example:

```{python}
#| output-location: column-fragment
my_list = [1,2,3,4]

squares = []

for x in my_list:
  squares.append(x ** 2)
  
```

. . . 

```{python}
#| output-location: column-fragment
print(squares)
```



## List Comprehension
* List comprehension is a shorter syntax when you create a new list based on another list.
```{python}
#| output-location: column-fragment
my_list = [1,2,3,4]
```


```{python}
#| output-location: column-fragment
squares = []

for x in my_list:
  squares.append(x ** 2)
```



. . . 

we can write instead:

```{python}
#| output-location: column-fragment
squares = [x ** 2 for x in my_list]
```


. . . 

$$
S = \\{ x^2 | \text{ for all } x \in \text{my_list} \\}
$$


## List Comprehension

```{python}
#| output-location: column-fragment
my_list = [1,2,3,4]
squares = [x ** 2 for x in my_list]
print(squares)
```
<br>

. . . 

<br>
* We can also add conditions

```{python}
#| output-location: column-fragment
my_list = [1,2,3,4]
squares = [x ** 2 for x in my_list if x > 2]
print(squares)
```


## Modules
- One great advantage of python that it has a vast ecosystem of packages.

- Some packages are build in, but still needs to be imported.

- Python use the syntax `import packagename` to import a package.

- The functions, methods etc. comes as a subset of the package, which can be reached by a dot.

. . .
```{python}
#| output-location: column-fragment
import random

random.choice(['ali', "bob", "chiara"])

```


## Modules
- You can also import all objects directly. Then you wont need to call the package name before.
. . .
```{python}
#| output-location: column-fragment
from random import *

choice(['ali', "bob", "chiara"])

```


. . .

- Or a subset:

```{python}
#| output-location: column-fragment
from random import choice

choice(['ali', "bob", "chiara"])

```

## Modules
- Or you can use an alias for the module
. . .
```{python}
#| output-location: column-fragment
import random as rnd

rnd.choice(['ali', "bob", "chiara"])

```
